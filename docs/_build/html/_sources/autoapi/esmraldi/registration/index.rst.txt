:mod:`esmraldi.registration`
============================

.. py:module:: esmraldi.registration

.. autoapi-nested-parse::

   Module for the registration of two images

   ..
       !! processed by numpydoc !!



Module Contents
---------------


.. function:: precision(im1, im2)

   Precision between two images
   defined as card(im1 \cap im2)/card(im2)


   :Parameters:

       **im1: np.ndarray**
           first binary image

       **im2: np.ndarray**
           second binary image

   :Returns:

       float
           precision value













   ..
       !! processed by numpydoc !!


.. function:: recall(im1, im2)

   Recall between two images
   defined as card(im1 \cap im2)/card(im1)


   :Parameters:

       **im1: np.ndarray**
           first binary image

       **im2: np.ndarray**
           second binary image

   :Returns:

       float
           recall value













   ..
       !! processed by numpydoc !!


.. function:: quality_registration(imRef, imRegistered)

   Evaluates registration quality
   Binarizes images
   Then computes recall and precision


   :Parameters:

       **imRef: np.ndarray**
           reference (fixed) image

       **imRegistered: np.ndarray**
           deformable (moving) image - after registration

   :Returns:

       tuple
           precision and recall values













   ..
       !! processed by numpydoc !!


.. function:: fmeasure(precision, recall)

   Computes the F-Measure, or F1-score,
   That is the harmonic mean
   of the precision and recall


   :Parameters:

       **precision: float**
           precision value

       **recall: float**
           recall value

   :Returns:

       float
           fmeasure













   ..
       !! processed by numpydoc !!


.. function:: mutual_information(imRef, imRegistered)

   Mutual information for joint histogram
   based on entropy computation


   :Parameters:

       **imRef: np.ndarray**
           reference (fixed) image

       **imRegistered: np.ndarray**
           deformable (moving)image

   :Returns:

       float
           mutual information













   ..
       !! processed by numpydoc !!


.. function:: best_fit(fixed, array_moving, numberOfBins, samplingPercentage)

   Finds the best fit between variations of the same image
   According to mutual information measure
   Different variations (eg symmetry) are stored in the
   first dimension of the array


   :Parameters:

       **fixed: np.ndarray**
           reference (fixed) image

       **array_moving: np.ndarray**
           3D deformable (moving) image

       **numberOfBins: int**
           number of bins for sampling

       **samplingPercentage: float**
           proportion of points to consider in sampling

   :Returns:

       sitk.ImageRegistrationMethod
           registration object













   ..
       !! processed by numpydoc !!


.. function:: register(fixed, moving, numberOfBins, samplingPercentage)

   Registration between reference (fixed)
   and deformable (moving) images
   transform initialized with moments
   metric=mutual information
   optimization=gradient descent
   interpolation=nearest neighbor


   :Parameters:

       **fixed: np.ndarray**
           reference (fixed) image

       **moving: np.ndarray**
           deformable (moving) image

       **numberOfBins: int**
           number of bins for sampling

       **samplingPercentage: float**
           proportion of points to consider in sampling

   :Returns:

       sitk.ImageRegistrationMethod
           registration object













   ..
       !! processed by numpydoc !!


